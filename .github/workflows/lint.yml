name: Lint
on: [push, pull_request]

jobs:
  tflint:
    name: TFLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: TFLint
        uses: docker://wata727/tflint

  fmt:
    name: Code Format
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:latest
    steps:
      - uses: actions/checkout@master
      - run: terraform fmt --recursive -check=true

  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v2
      - name: Install terraform-docs
        run: |
          # Get the download url of the latest version of terraform-docs
          tf_docs_download_url=$(curl -s https://api.github.com/repos/terraform-docs/terraform-docs/releases/latest | jq -rc '.assets[] | select( .name | contains("linux-amd64")).browser_download_url')
          mkdir -p $GITHUB_WORKSPACE/bin
          curl -Lo $GITHUB_WORKSPACE/bin/terraform-docs $tf_docs_download_url
          chmod +x $GITHUB_WORKSPACE/bin/terraform-docs
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
      - name: Check Docs
        uses: pre-commit/action@v2.0.0
        with:
          extra_args: --show-diff-on-failure --all-files terraform_docs

  Plan_test:
    name: Plan-Test
    runs-on: ubuntu-latest
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - uses: actions/checkout@master
      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
